spring.application.name=config-server
server.port=7777

#git地址
spring.cloud.config.server.git.uri=https://github.com/runyiqin/SpringCloudConfig
#git路径
spring.cloud.config.server.git.searchPaths=rep
#git分支
spring.cloud.config.label=master
#git用户名
spring.cloud.config.server.git.username=179835947@qq.com
#git密码
spring.cloud.config.server.git.password=q5363606
 

#开启热部署
spring.devtools.restart.enabled=true

#配置高可用的分布式配置中心
eureka.client.service-url.defaultZone=http://localhost:1111/eureka/

#使用spring cloud bus配置rabbitmq
spring.rabbitmq.host=192.168.213.110
spring.rabbitmq.port=5672
spring.rabbitmq.username=qinry
spring.rabbitmq.password=qinry

management.endpoints.web.exposure.include=refresh,health,info,bus-refresh


# spring cloud config配置分为两方面 server配置和config配置
#
#   server中配置git信息
#   spring.cloud.config.server.git.uri 配置GIT仓库的位置
#   spring.cloud.config.server.git.searchPaths 配置GIT仓库路径下的相对搜索位置，可配置多个
#   spring.cloud.config.label=master 配置访问的GIT仓库分支
#   spring.cloud.config.server.git.username 配置GIT仓库的用户名
#   spring.cloud.config.server.git.password 配置GIT仓库的密码
#   通过上面的配置后 在searchPaths对应的目录下创建配置文件。例如test.properties,test-dev.properties。在文件中配置相应的信息
#   属性覆盖
#       spring.cloud.config.server.overrides.name=
#       spring.cloud.config.server.overrides.from=
#   安全保护 集合spring security实现安全保护 在客户端和server端都进行user配置
#       security.user.name=
#       security.user.password=
#   信息的加密配置
#       涉及对称加密和非对称加密
#
#   client中的配置信息
#   spring.application.name=test  对应配置文件的｛application｝部分
#   spring.cloud.config.profile=dev 对应配置文件中的｛profile｝部分
#   spring.cloud.config.label=master 对应配置文件所在的git分支
#   spring.cloud.config.uri=  配置中心config-server的地址
#   以上的信息必须配置在bootstrap.properties文件中。这样config-server中的信息才能被正确加载。在spring boot对配置文件
#   的加载顺序中，对本应用jar包之外的配置文件加载会优于应用jar包内的配置。应为要从config-server中获取信息，这些信息的
#   优先级要高于本地的内容，实现外部配置。
#
#   spring.cloud.config.discovery.enable=true 开启通过服务来访问config server的功能
#   spring.cloud.config.discovery.serviceId= 指定config server注册的服务名
#   失败快速响应和重试
#       spring.cloud.config.failFast=true 开启快速返回失败。当config server有误时，不需要多等待前置的一些加载时间，实现了快速返回失败信息
#       当config server宕机或者客户端配置不正确导致连接不到而启动快速失败的情况，快速响应可以有很好的效果。
#       但是，如果只是网络波动等间歇性原因导致的问题，直接启动失败的代价有点高。所以出现了重试功能。在开启重试功能的时候，
#       需要确定已经配置了快速失败。
#       重试：在客户端pom.xml中配置spring-retry和spring-boot-starter-aop依赖，启动服务，发现在连接config server失败后，
#       会尝试重试，直至第六次失败后，返回错误信息。通过重试机制避免了这种间歇性问题引起的快速失败导致客户端无法启动的问题。
#           spring.cloud.config.retry.initial-interval= 下一次间隔的乘数，默认为1.1，所以当初的间隔为1000毫秒，下一次失败后的间隔就是1100毫秒
#           spring.cloud.config.retry.max-attempts= 最大重试次数，默认为6次
#           spring.cloud.config.retry.max-interval= 最大间隔时间，默认是2000毫秒
#           spring.cloud.config.retry.multiplier= 重试间隔时间 默认是1000毫秒
#
#       获得远程配置：{application}、{label}、{profile}这些参数。在GIT仓库中，一个形如{application}-{profile}.properties或者
#           {application}-{profile}.yml的配置文件，通过URL请求和客户端配置的访问对应可以总结如下：
#           1、通过向config server发送get请求以直接的方式获取，可用下面的链接方式。
#               不带{label}分支信息，默认访问master分支的信息
#               /{application}-{profile}.properties
#               /{application}-{profile}.yml
#               带{label}分支信息
#               /{label}/{application}-{profile}.properties
#               /{label}/{application}-{profile}.yml
#               /{application}/{profile}/[{label}]
#           2、通过客户端配置方式加载内容
#               spring.application.name 对应配置文件中的{application}内容
#               spring.cloud.config.profile 对应配置文件中的{profile}内容
#               spring.cloud.config.label 对应配置文件中的{label}内容
#
# 动态刷新配置;对配置内容实现实时更新。在config client中增加spring-boot-starter-actuator监控模块，
#       其中包含了/refresh端点的实现。该端点将用于实现客户端应用配置信息的重新获取和刷新
#
# ==============================spring cloud bus====================================================
#   spring cloud bus 主要是关于消息队列的配置
#

